(defun jss-script-mode* (script)
  (let ((jss-script script))
    (add-hook 'kill-buffer-hook 'jss-script-kill nil t)
    (let ((inhibit-read-only t))
      (erase-buffer)
      (insert (jss-script-body jss-script)))
    (js2-mode)
    (setf buffer-read-only t
          jss-current-script jss-script)))

(defun jss-script-kill ()
  (interactive)
  (setf (jss-script-buffer jss-current-script) nil))

(defmethod jss-script-display-at-position ((script jss-generic-script) line-number column-number)
  (if (jss-script-buffer script)
      (jss-script-mark-offset script line-number column-number)
    (lexical-let ((script script)
                  (line-number line-number)
                  (column-number column-number))
      (jss-deferred-then
       (jss-script-get-body script)
       (lambda (body)
         (setf (jss-script-buffer script) (generate-new-buffer (format "*JSS Script %s*" (jss-script-id script)))
               (jss-script-body script) body)
         (with-current-buffer (jss-script-buffer script)
           (jss-script-mode* script)
           (jss-script-mark-offset script line-number column-number)))))))

(defface jss-script-line-marker-face '((t :inherit highlight))
  "Face used to highlight the area around point.")

(defmethod jss-script-mark-offset ((script jss-generic-script) line-number column-number)
  (with-current-buffer (jss-script-buffer script)
    (let ((inhibit-read-only t))
      (goto-char (point-min))
      (remove-text-properties (point-min) (point-max) 'jss-script-offset-marker)
      (dolist (o (overlays-in (point-min) (point-max)))
        (delete-overlay o))
      (forward-line line-number)
      (ignore-errors
        (forward-char column-number))
      (let* ((inhibit-read-only t)
             (end-of-line-point (save-excursion (end-of-line) (point)))
             (overlay (make-overlay (point) (min end-of-line-point (+ (point) 30))
                                    (current-buffer))))
        (overlay-put overlay 'face 'jss-script-line-marker-face)
        (display-buffer (current-buffer))
        (set-window-point (get-buffer-window (current-buffer)) (point))
        (with-selected-window (get-buffer-window (current-buffer))
          (recenter))))))

(provide 'jss-script)
